/* tslint:disable */
/* eslint-disable */
/**
 * 少年强国API
 * ## 1.概述    本文档只适用于前端和后端开发使用，API内容可能会发生改变，届时后端将会与前端就具体改动进行探讨，并将最终改动方案提交到本文档。    本文档中有关数据模型的相关陈述已在后端数据文档中详细论述，请参阅后端数据文档。    本文版本，修改日期，修改内容列表如下：    |版本|日期|详情|  |:---|:---|:---|  |`v0.1`|`2022年10月15日`|本版本为该项目的最初版本，只描述了关于登录，获取用户信息，将微信帐号与系统内帐号绑定的部分，同时由于还没有确定好后端存储以及小程序端需要的具体数据，导致`user_detail`返回值部分异常简陋，有待完善。此外，具体接口之前的总体说明以及针对返回值的解释也需要完善|  |`v0.2`|`2023年1月2日`|修复了`user_detail`部分的返回值，完善了总体说明，增加了后端数据文档|  |`v0.3`|`2023年2月7日`|使用OpenAPI规范重写文档，便于日后生成SDK|    ## 2.基础规则    ### 1.API接口    API统一使用RESTFul或类RESTful风格接口模式，（如果将来会有迭代的话，有可能）使用接口路径中的`vX.X`确认api版本。    应用的`development`环境接口为`localhost:3000/`。    `production`环境接口待定。    ### 2.API参数    API GET参数使用Query传输    API POST传参部分使用`content-type: application/json`类型传输，部分使用Query传输，例 `username=admin&useremail=admin@example.com`    API的所有返回值均为`json`格式，基础结构如下    ```json  {    \"code\": 200, //结果code    \"msg\": \"ok\", //消息    \"data\": [] //返回信息  }  ```    无论执行成功与否，API Get请求状态码均为200, Post请求状态码均为201    ### 3.API结果code    API结果code遵循`HTTP Response Code`，目前用到的code如下：    |code|状态|含义|  |:---|:---|:---|  |200|OK|正常|  |400|Bad Request|参数等发生错误|  |403|Forbidden|没有登录或没有权限|  |404|Not Found|没有找到接口|  |429|Too many requests|触发速率限制|  |500|Internel Server Error|服务下线或运行出错|    ### 4.API安全    前端在访问API的过程中，需要在body最后添加一个auth参数，公式为    `以秒为单位的时间戳后两位+32位小写md5(以秒为单位的时间戳+除token外剩下的body参数)`    例如，假设现在的时间戳为`1665814186`，除token外剩下的body参数为`username=admin&useremail=admin@example.com`    则auth计算公式为`\"86\"+32位小写md5(\"1665814186\"+\"username=admin&useremail=admin@example.com\")`,结果为`86631e1979d748b09561f99a974d598d33`  
 *
 * OpenAPI spec version: v0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Result } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 获取账号详情
         * @summary 获取账号详情
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountDetail: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 绑定微信账号（使用邀请码）
         * @summary 绑定微信账号（使用邀请码）
         * @param {string} inviteCode 邀请码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindWeixin: async (inviteCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inviteCode' is not null or undefined
            if (inviteCode === null || inviteCode === undefined) {
                throw new RequiredError('inviteCode','Required parameter inviteCode was null or undefined when calling bindWeixin.');
            }
            const localVarPath = `/account/bind/weixin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            if (inviteCode !== undefined) {
                localVarQueryParameter['invite_code'] = inviteCode;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 通话历史
         * @summary 通话历史
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callHistory: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/call/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 通话状态轮询
         * @summary 通话状态轮询
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callState: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/call/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 挂断电话
         * @summary 挂断电话
         * @param {string} id 通话id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endCall: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling endCall.');
            }
            const localVarPath = `/call/end`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 打电话
         * @summary 打电话
         * @param {string} caller 拨号目标ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newCall: async (caller: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caller' is not null or undefined
            if (caller === null || caller === undefined) {
                throw new RequiredError('caller','Required parameter caller was null or undefined when calling newCall.');
            }
            const localVarPath = `/call/new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("token")
                    : await configuration.apiKey;
                localVarQueryParameter["token"] = localVarApiKeyValue;
            }

            if (caller !== undefined) {
                localVarQueryParameter['caller'] = caller;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 使用微信账号登录
         * @summary 使用微信账号登录
         * @param {string} token 微信wx.login函数生成的token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weixinLogin: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling weixinLogin.');
            }
            const localVarPath = `/account/login/weixin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 获取账号详情
         * @summary 获取账号详情
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountDetail(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Result>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).accountDetail(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 绑定微信账号（使用邀请码）
         * @summary 绑定微信账号（使用邀请码）
         * @param {string} inviteCode 邀请码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bindWeixin(inviteCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Result>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).bindWeixin(inviteCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 通话历史
         * @summary 通话历史
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callHistory(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Result>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).callHistory(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 通话状态轮询
         * @summary 通话状态轮询
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callState(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Result>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).callState(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 挂断电话
         * @summary 挂断电话
         * @param {string} id 通话id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endCall(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Result>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).endCall(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 打电话
         * @summary 打电话
         * @param {string} caller 拨号目标ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newCall(caller: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Result>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).newCall(caller, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 使用微信账号登录
         * @summary 使用微信账号登录
         * @param {string} token 微信wx.login函数生成的token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weixinLogin(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Result>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).weixinLogin(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 获取账号详情
         * @summary 获取账号详情
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountDetail(options?: AxiosRequestConfig): Promise<AxiosResponse<Result>> {
            return DefaultApiFp(configuration).accountDetail(options).then((request) => request(axios, basePath));
        },
        /**
         * 绑定微信账号（使用邀请码）
         * @summary 绑定微信账号（使用邀请码）
         * @param {string} inviteCode 邀请码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bindWeixin(inviteCode: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Result>> {
            return DefaultApiFp(configuration).bindWeixin(inviteCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 通话历史
         * @summary 通话历史
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callHistory(options?: AxiosRequestConfig): Promise<AxiosResponse<Result>> {
            return DefaultApiFp(configuration).callHistory(options).then((request) => request(axios, basePath));
        },
        /**
         * 通话状态轮询
         * @summary 通话状态轮询
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callState(options?: AxiosRequestConfig): Promise<AxiosResponse<Result>> {
            return DefaultApiFp(configuration).callState(options).then((request) => request(axios, basePath));
        },
        /**
         * 挂断电话
         * @summary 挂断电话
         * @param {string} id 通话id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endCall(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Result>> {
            return DefaultApiFp(configuration).endCall(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 打电话
         * @summary 打电话
         * @param {string} caller 拨号目标ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newCall(caller: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Result>> {
            return DefaultApiFp(configuration).newCall(caller, options).then((request) => request(axios, basePath));
        },
        /**
         * 使用微信账号登录
         * @summary 使用微信账号登录
         * @param {string} token 微信wx.login函数生成的token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weixinLogin(token: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Result>> {
            return DefaultApiFp(configuration).weixinLogin(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 获取账号详情
     * @summary 获取账号详情
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async accountDetail(options?: AxiosRequestConfig) : Promise<AxiosResponse<Result>> {
        return DefaultApiFp(this.configuration).accountDetail(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 绑定微信账号（使用邀请码）
     * @summary 绑定微信账号（使用邀请码）
     * @param {string} inviteCode 邀请码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async bindWeixin(inviteCode: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Result>> {
        return DefaultApiFp(this.configuration).bindWeixin(inviteCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 通话历史
     * @summary 通话历史
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async callHistory(options?: AxiosRequestConfig) : Promise<AxiosResponse<Result>> {
        return DefaultApiFp(this.configuration).callHistory(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 通话状态轮询
     * @summary 通话状态轮询
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async callState(options?: AxiosRequestConfig) : Promise<AxiosResponse<Result>> {
        return DefaultApiFp(this.configuration).callState(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 挂断电话
     * @summary 挂断电话
     * @param {string} id 通话id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async endCall(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Result>> {
        return DefaultApiFp(this.configuration).endCall(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 打电话
     * @summary 打电话
     * @param {string} caller 拨号目标ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async newCall(caller: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Result>> {
        return DefaultApiFp(this.configuration).newCall(caller, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 使用微信账号登录
     * @summary 使用微信账号登录
     * @param {string} token 微信wx.login函数生成的token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async weixinLogin(token: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Result>> {
        return DefaultApiFp(this.configuration).weixinLogin(token, options).then((request) => request(this.axios, this.basePath));
    }
}
